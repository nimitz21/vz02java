package animal;

import junit.framework.TestCase;
import pair.Pair;

import java.util.HashSet;

/**
 * Created by ASUS INDONESIA on 3/28/2017.
 */
public class AnimalTest extends TestCase {
  public void testGetId() throws Exception {
    Animal a= new Animal("WF".toString(), new Pair(3,3));
    assert(a.GetId().equals("WF".toString()));
  }

  public void testGetNumber() throws Exception {

  }

  public void testGetWeight() throws Exception {

  }

  public void testGetEat() throws Exception {

  }

  public void testGetPos() throws Exception {

  }

  public void testGetType() throws Exception {

  }

  public void testGetLegend() throws Exception {
	  Animal a;
	  a = new Animal ("WF", new Pair(0, 0));
	  assert(a.GetLegend() == '1');
	  a = new Animal ("LI", new Pair(0, 0));
	  assert(a.GetLegend() == '2');
	  a = new Animal ("ZBR", new Pair(0, 0));
	  assert(a.GetLegend() == '3');
	  a = new Animal ("ELP", new Pair(0, 0));
	  assert(a.GetLegend() == '4');
	  a = new Animal ("MCQ", new Pair(0, 0));
	  assert(a.GetLegend() == '5');
	  a = new Animal ("HG", new Pair(0, 0));
	  assert(a.GetLegend() == '6');
	  a = new Animal ("SHK", new Pair(0, 0));
	  assert(a.GetLegend() == '7');
	  a = new Animal ("MRE", new Pair(0, 0));
	  assert(a.GetLegend() == '8');
	  a = new Animal ("DGG", new Pair(0, 0));
	  assert(a.GetLegend() == '9');
	  a = new Animal ("TRL", new Pair(0, 0));
	  assert(a.GetLegend() == '0');
	  a = new Animal ("DLP", new Pair(0, 0));
	  assert(a.GetLegend() == '!');
	  a = new Animal ("WHL", new Pair(0, 0));
	  assert(a.GetLegend() == '@');
	  a = new Animal ("EGL", new Pair(0, 0));
	  assert(a.GetLegend() == '#');
	  a = new Animal ("OW", new Pair(0, 0));
	  assert(a.GetLegend() == '$');
	  a = new Animal ("HMB", new Pair(0, 0));
	  assert(a.GetLegend() == '%');
	  a = new Animal ("CKT", new Pair(0, 0));
	  assert(a.GetLegend() == '^');
	  a = new Animal ("RBN", new Pair(0, 0));
	  assert(a.GetLegend() == '&');
	  a = new Animal ("BT", new Pair(0, 0));
	  assert(a.GetLegend() == '*');
	  a = new Animal ("PGN", new Pair(0, 0));
	  assert(a.GetLegend() == '(');
	  a = new Animal ("HPP", new Pair(0, 0));
	  assert(a.GetLegend() == ')');
	  a = new Animal ("PLC", new Pair(0, 0));
	  assert(a.GetLegend() == '`');
	  a = new Animal ("GSE", new Pair(0, 0));
	  assert(a.GetLegend() == '+');
	  a = new Animal ("CRN", new Pair(0, 0));
	  assert(a.GetLegend() == '-');
	  a = new Animal ("DRL", new Pair(0, 0));
	  assert(a.GetLegend() == '=');
	  a = new Animal ("CLG", new Pair(0, 0));
	  assert(a.GetLegend() == '<');
	  a = new Animal ("SGL", new Pair(0, 0));
	  assert(a.GetLegend() == '>');



  }

  public void testGetHabitat() throws Exception {
	  Animal a;
	  HashSet<Character> habitat;
	  a = new Animal ("WF", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("LI", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("ZBR", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("ELP", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("MCQ", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("HG", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("SHK", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('W'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("MRE", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('W'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("DGG", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('W'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("TRL", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('W'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("DLP", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('W'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("WHL", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('W'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("EGL", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("OW", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("HMB", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("CKT", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("RBN", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("BT", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("PNG", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  habitat.add(new Character('W'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("HPP", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  habitat.add(new Character('W'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("PLC", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('W'));
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("GSE", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('W'));
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("CRN", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('W'));
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("DRL", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("CLG", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));
	  a = new Animal ("SGL", new Pair(0, 0));
	  habitat = new HashSet<Character>();
	  habitat.add(new Character('L'));
	  habitat.add(new Character('A'));
	  assert(a.GetHabitat().equals(habitat));

  }

  public void testGetCompatible() throws Exception {
	  Animal a;
	  HashSet<String> compatible;
	  a = new Animal ("WF", new Pair(0, 0));
  	compatible = new HashSet<String>();
	  compatible.add(new String("WF"));
	  compatible.add(new String("ELP"));
	  compatible.add(new String("HPP"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("LI", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("LI"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("ZBR", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("ZBR"));
	  compatible.add(new String("ELP"));
	  compatible.add(new String("MCQ"));
	  compatible.add(new String("HG"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("DRL"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("SGL"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("ELF", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("WF"));
	  compatible.add(new String("ZBR"));
	  compatible.add(new String("ELP"));
	  compatible.add(new String("MCQ"));
	  compatible.add(new String("HG"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("MCQ", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("ZBR"));
	  compatible.add(new String("ELP"));
	  compatible.add(new String("MCQ"));
	  compatible.add(new String("HG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("DRL"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("SGL"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("HG", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("ZBR"));
	  compatible.add(new String("ELP"));
	  compatible.add(new String("MCQ"));
	  compatible.add(new String("HG"));
	  compatible.add(new String("HPP"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("SHK", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("SHK"));
	  compatible.add(new String("WHL"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("MRE", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("MRE"));
	  compatible.add(new String("DGG"));
	  compatible.add(new String("TRL"));
	  compatible.add(new String("DLP"));
	  compatible.add(new String("WHL"));
	  compatible.add(new String("HPP"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("DGG", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("MRE"));
	  compatible.add(new String("DGG"));
	  compatible.add(new String("TRL"));
	  compatible.add(new String("DLP"));
	  compatible.add(new String("WHL"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("TRL", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("MRE"));
	  compatible.add(new String("DGG"));
	  compatible.add(new String("TRL"));
	  compatible.add(new String("DLP"));
	  compatible.add(new String("WHL"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("DLP", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("MRE"));
	  compatible.add(new String("DGG"));
	  compatible.add(new String("TRL"));
	  compatible.add(new String("DLP"));
	  compatible.add(new String("WHL"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("WHL", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("SHK"));
	  compatible.add(new String("MRE"));
	  compatible.add(new String("DGG"));
	  compatible.add(new String("TRL"));
	  compatible.add(new String("DLP"));
	  compatible.add(new String("WHL"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("EGL", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("EGL"));
	  compatible.add(new String("OW"));
	  compatible.add(new String("PLC"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("OW", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("EGL"));
	  compatible.add(new String("OW"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("DRL"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("HMB", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("HMB"));
	  compatible.add(new String("CKT"));
	  compatible.add(new String("RBN"));
	  compatible.add(new String("BT"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("SGL"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("CKT", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("HMB"));
	  compatible.add(new String("CKT"));
	  compatible.add(new String("RBN"));
	  compatible.add(new String("BT"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  compatible.add(new String("CLG"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("RBN", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("HMB"));
	  compatible.add(new String("CKT"));
	  compatible.add(new String("RBN"));
	  compatible.add(new String("BT"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("DRL"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("BT", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("HMB"));
	  compatible.add(new String("CKT"));
	  compatible.add(new String("RBN"));
	  compatible.add(new String("BT"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("PNG", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("ZBR"));
	  compatible.add(new String("ELP"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("DRL"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("SGL"));
	  compatible.add(new String("DGG"));
	  compatible.add(new String("TRL"));
	  compatible.add(new String("DLP"));
	  compatible.add(new String("WHL"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("HPP", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("WF"));
	  compatible.add(new String("ZBR"));
	  compatible.add(new String("ELP"));
	  compatible.add(new String("MCQ"));
	  compatible.add(new String("HG"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("MRE"));
	  compatible.add(new String("DGG"));
	  compatible.add(new String("TRL"));
	  compatible.add(new String("DLP"));
	  compatible.add(new String("WHL"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("PLC", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("MRE"));
	  compatible.add(new String("DGG"));
	  compatible.add(new String("DLP"));
	  compatible.add(new String("WHL"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  compatible.add(new String("EGL"));
	  compatible.add(new String("OW"));
	  compatible.add(new String("HMB"));
	  compatible.add(new String("CKT"));
	  compatible.add(new String("RBN"));
	  compatible.add(new String("BT"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("SGL"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("GSE", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("MRE"));
	  compatible.add(new String("DGG"));
	  compatible.add(new String("TRL"));
	  compatible.add(new String("DLP"));
	  compatible.add(new String("WHL"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  compatible.add(new String("HMB"));
	  compatible.add(new String("CKT"));
	  compatible.add(new String("RBN"));
	  compatible.add(new String("BT"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("SGL"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("CRN", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("MRE"));
	  compatible.add(new String("DGG"));
	  compatible.add(new String("TRL"));
	  compatible.add(new String("DLP"));
	  compatible.add(new String("WHL"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("PLC"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  compatible.add(new String("HMB"));
	  compatible.add(new String("CKT"));
	  compatible.add(new String("RBN"));
	  compatible.add(new String("BT"));
	  compatible.add(new String("DRL"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("SGL"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("DRL", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("ZBR"));
	  compatible.add(new String("MCQ"));
	  compatible.add(new String("HG"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("DRL"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("SGL"));
	  compatible.add(new String("OW"));
	  compatible.add(new String("RBN"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("CLG", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("ZBR"));
	  compatible.add(new String("MCQ"));
	  compatible.add(new String("HG"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("HPP"));
	  compatible.add(new String("DRL"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("SGL"));
	  compatible.add(new String("HMB"));
	  compatible.add(new String("CKT"));
	  compatible.add(new String("RBN"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  assert(a.GetCompatible().equals(compatible));
	  a = new Animal ("SGL", new Pair(0, 0));
	  compatible = new HashSet<String>();
	  compatible.add(new String("ZBR"));
	  compatible.add(new String("MCQ"));
	  compatible.add(new String("HG"));
	  compatible.add(new String("PNG"));
	  compatible.add(new String("DRL"));
	  compatible.add(new String("CLG"));
	  compatible.add(new String("SGL"));
	  compatible.add(new String("HMB"));
	  compatible.add(new String("GSE"));
	  compatible.add(new String("CRN"));
	  assert(a.GetCompatible().equals(compatible));
  }

  public void testMove() throws Exception {
		Animal a= new Animal ("WF", new Pair(0, 0));
		a.Move(0);
		assert(a.GetPos().first == -1 && a.GetPos().second == 0);
		a.Move(1);
		assert(a.GetPos().first == -1 && a.GetPos().second == -1);
		a.Move(2);
		assert(a.GetPos().first == -1 && a.GetPos().second == 0);
		a.Move(3);
		assert(a.GetPos().first == 0 && a.GetPos().second == 0);
  }

}